package com.gcit.lms.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import com.gcit.lms.entity.Book;
import com.gcit.lms.entity.Publisher;

public class PublisherDAO extends BaseDAO  implements ResultSetExtractor<List<Publisher>>{

	public void addPublisher(Publisher publisher) throws SQLException {
		System.out.println("in dao " + publisher.getPublisherName());
		template.update("Insert into tbl_publisher(publisherName,publisherAddress,publisherPhone) values (?,?,?)",
				new Object[] { publisher.getPublisherName(),
						publisher.getPublisherAddress(),
						publisher.getPublisherPhones() });
	}

	public Integer addPublisherWithId(Publisher publisher) throws SQLException {
		
		KeyHolder holder = new GeneratedKeyHolder();
		final String sql =  "Insert into tbl_publisher(publisherName,publisherAddress,publisherPhone) values (?,?,?)";
				
		template.update(new PreparedStatementCreator() {
			
			@Override
			public PreparedStatement createPreparedStatement(Connection connection)
					throws SQLException {
				// TODO Auto-generated method stub
				PreparedStatement ps = connection.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);
				ps.setString(1,publisher.getPublisherName());
				ps.setString(2, publisher.getPublisherAddress());
				ps.setString(3, publisher.getPublisherPhones());
				
				
				return null;
			}
		});
				,
				new Object[] { ,
						,
						 });
	}

	public void updatePublisher(Publisher publisher) throws SQLException {
		template.update("Update tbl_publisher set publisherName= ?, publisherAddress=?, publisherPhone=? where publisherId = ?",
				new Object[] { publisher.getPublisherName(),
						publisher.getPublisherAddress(),
						publisher.getPublisherPhones(),
						publisher.getPublisherId() });
	}

	public void deletePublisher(Publisher publisher) throws SQLException {
		template.update("delete from tbl_publisher where publisherId = ?",
				new Object[] { publisher.getPublisherId() });

	}
	
	
	@SuppressWarnings("unchecked")
	public List<Publisher> readAllPublisher(Integer pageNo) throws ClassNotFoundException, SQLException {
		setPageNo(pageNo);
		return (List<Publisher>) template.query("select * from tbl_publisher", this);
	}
	
	@SuppressWarnings("unchecked")
	public List<Publisher> readAllPublishersByName(Integer pageNo,String searchString)
			throws SQLException {
		searchString = "%" + searchString + "%";
		setPageNo(pageNo);
		return (List<Publisher>) template.query(
				"select * from tbl_publisher where publisherName like ?",
				new Object[] { searchString }, this);
	}
	
	public Integer getPublishersCount() throws SQLException{
		return template.queryForObject("select count(*) as COUNT from tbl_publisher", Integer.class);
	}

	@SuppressWarnings("unchecked")
	public Publisher readPublishersByPK(Integer publisherId)
			throws SQLException {
		List<Publisher> publishers = (List<Publisher>) template.query(
				"select * from tbl_publisher where publisherId=?",
				new Object[] { publisherId },this);
		if (publishers != null) {
			return publishers.get(0);
		}
		return null;

	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Publisher> extractData(ResultSet rs) throws SQLException {
		// TODO Auto-generated method stub

		List<Publisher> publisher = new ArrayList<Publisher>();
		
		while(rs.next()){
			Publisher b = new Publisher();
			b.setPublisherId(rs.getInt("publisherId"));
			b.setPublisherName(rs.getString("publisherName"));
			b.setPublisherAddress(rs.getString("publisherAddress"));
			b.setPublisherPhones(rs.getString("publisherPhone"));
			publisher.add(b);
		}
		return publisher;
	}


}
