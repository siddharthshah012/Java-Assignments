package com.gcit.lms.dao;

public class Snippet {
	public List<Author> getAuthorsByName(Integer pageNo, String authorName) throws SQLException{
			Connection conn = null;
			try {
				conn = cUtil.getConnection();
				AuthorDAO adao = new AuthorDAO(conn);
				return adao.readAllAuthorsByName(authorName);
			} catch (SQLException e) {
				e.printStackTrace();
			} finally{
				if(conn!=null){
					conn.close();
				}
			}
			return null;
		}
		
		
		public void addBranch(Library branch) throws Exception{
			Connection conn = null;
			try {
				conn = cUtil.getConnection();
				LibraryBranchDAO adao = new LibraryBranchDAO(conn);
				adao.addBranch(branch);
				conn.commit();
			} catch (ClassNotFoundException | SQLException e) {
				System.out.println("Adding branch failed");
				e.printStackTrace();
				conn.rollback();
			} finally{
				if(conn!=null){
					conn.close();
				}
			}
		}
		
		
		
		public void editBorrower(Borrower borrower) throws SQLException{
			Connection conn = null;
			try {
				conn = cUtil.getConnection();
				BorrowerDAO adao = new BorrowerDAO(conn);
				adao.updateBorrower(borrower);
				conn.commit();
			} catch (SQLException e) {
				e.printStackTrace();
				conn.rollback();
			} finally{
				if(conn!=null){
					conn.close();
				}
			}
		}
		
		public void editBranch(Library branch) throws Exception{
			Connection conn = null;
			try {
				conn = cUtil.getConnection();
				LibraryBranchDAO lbdao = new LibraryBranchDAO(conn);
				lbdao.updateLibBranch(branch);
				conn.commit();
			} catch (ClassNotFoundException | SQLException e) {
				e.printStackTrace();
				conn.rollback();
			} finally{
				if(conn!=null){
					conn.close();
				}
			}
		}
		
		
		public void deleteBranch(Library branch) throws Exception{
			Connection conn = null;
			try {
				conn = cUtil.getConnection();
				LibraryBranchDAO lbdao = new LibraryBranchDAO(conn);
				lbdao.deleteLibBranch(branch);
				System.out.println("Deleted successfully");
				conn.commit();
			} catch (ClassNotFoundException | SQLException e) {
				System.out.println("Delete branch failed.");
				conn.rollback();
			} finally{
				if(conn!=null){
					conn.close();
				}
			}
		}
		
	
		
		public List<Book> getAllBooks() throws SQLException {
			Connection conn = null;
			conn = cUtil.getConnection();
			BookDAO bdao = new BookDAO(conn);
			try {
					return bdao.readAllBooks();
	
			} catch (SQLException e) {
				e.printStackTrace();
			} finally {
				if (conn != null) {
					conn.close();
				}
			}
			
			return null;
		}
		
		
		public List<Library> getBranchsByName(Integer pageNo, String branchName) throws SQLException{
			Connection conn = null;
			try {
				conn = cUtil.getConnection();
				LibraryBranchDAO lbdao = new LibraryBranchDAO(conn);
				return lbdao.readBranchesByName(branchName);
			} finally{
				if(conn!=null){
					conn.close();
				}
			}
		}
		
		
		public List<Book> getBooksByName(Integer pageNo, String bookName) throws SQLException{
			Connection conn = null;
			try {
				conn = cUtil.getConnection();
				BookDAO bdao = new BookDAO(conn);
				return bdao.readAllBooksByTitle(bookName);
			} catch (SQLException e) {
				System.out.println("Get books by name failed!");
			} finally{
				if(conn!=null){
					conn.close();
				}
			}
			return null;
		}
		
		
		public void deleteBook(Book book) throws SQLException {
			Connection conn = null;
	
			conn = cUtil.getConnection();
			BookDAO bdao = new BookDAO(conn);
			try {
				bdao.deleteBook(book);
				conn.commit();
			} catch (SQLException e) {
				e.printStackTrace();
				conn.rollback();
			} finally {
				if (conn != null) {
					conn.close();
				}
			}
		}
		
		public List<Genre> getAllGenres() throws SQLException{
			Connection conn = null;
			try {
				conn = cUtil.getConnection();
				GenreDAO gdao = new GenreDAO(conn);
				return gdao.readAllGenres();
			} catch (ClassNotFoundException | SQLException e) {
				e.printStackTrace();
			} finally{
				if(conn!=null){
					conn.close();
				}
			}
			return null;
		}
	
		
		public List<Publisher> getAllPublishers() throws SQLException{
			Connection conn = null;
			try {
				conn = cUtil.getConnection();
				PublisherDAO pdao = new PublisherDAO(conn);
				return pdao.readAllPublishers();
			} catch (SQLException e) {
				e.printStackTrace();
			} finally{
				if(conn!=null){
					conn.close();
				}
			}
			return null;
		}
		
		public Genre getGenreById(Integer genreId) throws SQLException{
			Connection conn = null;
			try {
				conn = cUtil.getConnection();
				GenreDAO gdao = new GenreDAO(conn);
				return gdao.readGenreByID(genreId);
			} catch (ClassNotFoundException | SQLException e) {
				e.printStackTrace();
			} finally{
				if(conn!=null){
					conn.close();
				}
			}
			return null;
		}
		
		public Publisher getPublisherById(Integer pubId) throws SQLException{
			Connection conn = null;
			try {
				conn = cUtil.getConnection();
				PublisherDAO pdao = new PublisherDAO(conn);
				return pdao.readPublishersById(pubId);
			} catch (SQLException e) {
				e.printStackTrace();
			} finally{
				if(conn!=null){
					conn.close();
				}
			}
			return null;
		}
		
		public List<Library> getAllBranches(Integer pageNo) throws ClassNotFoundException, SQLException{
			Connection conn = null;
			conn = cUtil.getConnection();
			try{
				LibraryBranchDAO brdao = new LibraryBranchDAO(conn);
				return brdao.readAllBranches();
			}catch (Exception e){
				e.printStackTrace();
			}finally{
				conn.close();
			}
			return null;
		}
		
		public List<?> getBranchByID(Integer branchId) throws ClassNotFoundException, SQLException {
			Connection conn = null;
			conn = cUtil.getConnection();
			try{
				LibraryBranchDAO lbdao = new LibraryBranchDAO(conn);
				return lbdao.readLibBranchByID(branchId);
			}catch (Exception e){
				e.printStackTrace();
			}finally{
				conn.close();
			}
			return null;
		}
		
		public List<Publisher> getAllPublisher() throws ClassNotFoundException,
				SQLException {
			Connection conn = null;
			conn = cUtil.getConnection();
			try {
				PublisherDAO pbdao = new PublisherDAO(conn);
				return pbdao.readAllPublishers();
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				conn.close();
			}
			return null;
		}
		
		public List<Genre> getAllGenre() throws ClassNotFoundException, SQLException{
			Connection conn = null;
			conn = cUtil.getConnection();
			try{
				GenreDAO gndao = new GenreDAO(conn);
				return gndao.readAllGenres();
			}catch (Exception e){
				e.printStackTrace();
			}finally{
				conn.close();
			}
			return null;
		}
		public List<Borrower> getAllBorrower() throws ClassNotFoundException, SQLException{
			Connection conn = null;
			conn = cUtil.getConnection();
			try{
				BorrowerDAO brdao = new BorrowerDAO(conn);
				return brdao.readAllBorrowers();
			}catch (Exception e){
				e.printStackTrace();
			}finally{
				conn.close();
			}
			return null;
		}
		
		public Borrower getBorrowerByID(Integer cardNo) throws ClassNotFoundException, SQLException {
			Connection conn = null;
			conn = cUtil.getConnection();
			try{
				BorrowerDAO brdao = new BorrowerDAO(conn);
				return brdao.readBorrowerByID(cardNo);
			}catch (Exception e){
				e.printStackTrace();
			}finally{
				conn.close();
			}
			return null;
		}
		
		public List<BookCopies> getBookCopiesByBranchID(Integer branchId) throws ClassNotFoundException, SQLException {
			Connection conn = null;
			conn = cUtil.getConnection();
			try{
				BookCopiesDAO bdao = new BookCopiesDAO(conn);
				return bdao.readBookCopiesByBranchID(branchId);
			}catch (Exception e){
				e.printStackTrace();
			}finally{
				conn.close();
			}
			return null;
		}
		
		public void editDueDate(BookLoans bl) throws ClassNotFoundException, SQLException{
			Connection conn = null;
			conn = cUtil.getConnection();
			
			try{
				BookLoansDAO adao = new BookLoansDAO(conn);
				adao.updateDueDate(bl, 12);
				conn.commit();
			}catch (Exception e){
				conn.rollback();
			}finally{
				conn.close();
			}
			return;
		}
		
		
		public void deleteBorrower(Borrower brr) throws ClassNotFoundException, SQLException {
			Connection conn = null;
			conn = cUtil.getConnection();
			try{
				BorrowerDAO brdao = new BorrowerDAO(conn);
				brdao.deleteBorrower(brr);
				conn.commit();
			}catch (Exception e){
				e.printStackTrace();
			}finally{
				conn.close();
			}
			
		}
		
		public List<Borrower> getAllBorrowerByName(String searchString) throws ClassNotFoundException, SQLException{
			Connection conn = null;
			conn = cUtil.getConnection();
			try{
				BorrowerDAO adao = new BorrowerDAO(conn);
				return adao.readBorrowerByName(searchString);
			}catch (Exception e){
				e.printStackTrace();
				//conn.rollback();
			}finally{
				conn.close();
			}
			return null;
		}
		
		
		public Integer getAuthorCount() throws ClassNotFoundException, SQLException{
			
			Connection conn = null;
			conn = cUtil.getConnection();
			Integer count = null;
			try{
				AuthorDAO adao = new AuthorDAO(conn);
				count = adao.totalAuthorCount();
				conn.commit();
			}catch (Exception e){
				conn.rollback();
			}finally{
				conn.close();
			}
					
			return count;
		}
		
		public Integer getBookCount() throws ClassNotFoundException, SQLException{
			
			Connection conn = null;
			conn = cUtil.getConnection();
			Integer count = null;
			try{
				BookDAO bdao = new BookDAO(conn);
				count = bdao.totalBookCount();
				conn.commit();
			}catch (Exception e){
				conn.rollback();
			}finally{
				conn.close();
			}
			
			return count;
		}
		
		public Integer getBranchCount() throws ClassNotFoundException, SQLException{
	
			Connection conn = null;
			conn = cUtil.getConnection();
			Integer count = null;
			try{
				LibraryBranchDAO adao = new LibraryBranchDAO(conn);
				count = adao.totalBranchCount();
				conn.commit();
			}catch (Exception e){
				conn.rollback();
			}finally{
				conn.close();
			}
	
			return count;
		}
		
		
		public Integer getBorrowerCount() throws ClassNotFoundException, SQLException{
	
			Connection conn = null;
			conn = cUtil.getConnection();
			Integer count = null;
			try{
				BorrowerDAO adao = new BorrowerDAO(conn);
				count = adao.totalBorrowerCount();
				conn.commit();
			}catch (Exception e){
				conn.rollback();
			}finally{
				conn.close();
			}
				
			return count;
		}
		
		
		
	}
	
}

