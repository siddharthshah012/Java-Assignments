package com.gcit.lms.dao;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.gcit.lms.entity.Author;
import com.gcit.lms.entity.Book;
import com.gcit.lms.entity.Library;

public class LibraryBranchDAO extends BaseDAO{

	public LibraryBranchDAO(Connection conn) {
		super(conn);
		// TODO Auto-generated constructor stub
	}
	
	public void addBranch(Library library) throws Exception {
		save("insert into tbl_library_branch (branchName, branchAddress) values(?, ?)",
				new Object[] { library.getBranchName(),
						library.getBranchAddress() });
	}
	
	
	public void updateLibBranch(Library library) throws Exception {
		save("update tbl_library_branch set branchName = ?, branchAddress = ? where branchId = ?",
				new Object[] { library.getBranchName(),
						library.getBranchAddress(), library.getBranchId() });

	}
	
	public void deleteLibBranch(Library library) throws Exception {
		save("delete from tbl_library_branch where branchId = ?",
				new Object[] { library.getBranchId() });
	}
	
	
	@SuppressWarnings("unchecked")
	public List<Library> readAllBranches(Integer pageNo) throws ClassNotFoundException, SQLException{
		//setPageNo(pageNo);
		return (List<Library>) read("select * from tbl_library_branch", null);
	}
	
	public Library readLibBranchByID(Integer branchId)
			throws ClassNotFoundException, SQLException {
		@SuppressWarnings("unchecked")
		List<Library> library = (List<Library>) read(
				"select * from tbl_library_branch where branchId = ?",
				new Object[] { branchId });
		if (library != null && !library.isEmpty()) {
			return (Library) library.get(0);
		}
		return null;
	}
	
	@SuppressWarnings("unchecked")
	public List<Library> readByLibraryName(String searchString, int pageNo,
			int pageSize) throws Exception {
		setPageNo(pageNo);

		searchString = "%" + searchString + "%";
		return (List<Library>) read(
				"select * from tbl_library_branch where branchName like ?",
				new Object[] { searchString });
	}
	
	@SuppressWarnings("unchecked")
	public List<Library> readAllBranches(Integer pageNo) throws ClassNotFoundException, SQLException{
		//setPageNo(pageNo);
		return (List<Library>) read("select * from tbl_library_branch", null);
	}
	/*
	public List<Library> showBooksinBranch(Integer branchId) throws SQLException {
		
		String query1 ="Select bk.bookId,title, authorName "+
				"from tbl_book_authors as ba "+
				"join tbl_book as bk on bk.bookId=ba.bookId "+
				"join tbl_author as au on au.authorId=ba.authorId "+
				"Where bk.bookId IN "+
				"(select bc.bookId from tbl_book_copies as bc where bc.branchId =?)";
		
		@SuppressWarnings("unchecked")
		List<Library> library = (List<Library>) read(
				query1,
				new Object[] { branchId });
		if (library != null && !library.isEmpty()) {
			return library;
		}
		return null;
		
		
	}*/

	

	@SuppressWarnings("unchecked")
	@Override
	public List<?> extractData(ResultSet rs) throws SQLException {
		// TODO Auto-generated method stub
		List<Library> library = new ArrayList<>();
		BookDAO bdao = new BookDAO(conn);
		while (rs.next()) {
			Library lib = new Library();
			lib.setBranchId(rs.getInt("branchId"));
			lib.setBranchName(rs.getString("branchName"));
			lib.setBranchAddress(rs.getString("branchAddress"));
			List<Book> books = (List<Book>) bdao
					.readFirstLevel(
							"select * from tbl_book where bookId In"
									+ "(select bookId from tbl_book_copies where branchId=?)",
							new Object[] { lib.getBranchId() });
			lib.setBooks(books);
			
			library.add(lib);
		}
		return library;
		//return null;
	}

	@Override
	public List<?> extractDataFirstLevel(ResultSet rs) throws SQLException {
		// TODO Auto-generated method stub
		List<Library> libraries = new ArrayList<Library>();

		while (rs.next()) {
			Library l = new Library();
			l.setBranchId(rs.getInt("branchId"));
			l.setBranchName(rs.getString("branchName"));
			l.setBranchAddress(rs.getString("branchAddress"));

			libraries.add(l);
		}
		return libraries;
	}
	public List<Library> readBranchesByName(String branchName) {
		// TODO Auto-generated method stub
		return null;
	}


	public Integer getBranchesCount() throws SQLException {
		// TODO Auto-generated method stub
		return getCount("select count(*) as COUNT from tbl_library_branch;", null);
	}


}
