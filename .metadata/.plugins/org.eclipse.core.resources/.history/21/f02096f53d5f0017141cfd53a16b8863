package com.gcit.lms.dao;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.ResultSetExtractor;


import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import com.gcit.lms.entity.Book;
import com.gcit.lms.entity.Publisher;

public class BookDAO extends BaseDAO implements ResultSetExtractor<List<Book>>{

	public void addBook(Book book) throws SQLException{
		template.query("insert into tbl_book(title) values (?)", new Object[] {book.getTitle()},this);
	}
	
	public Integer addBookWithID(Book book) throws SQLException {
		KeyHolder holder = new GeneratedKeyHolder();
		final String sql = "insert into tbl_book(title) values (?)";
		template.update(new PreparedStatementCreator() {
			@Override
			public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
				PreparedStatement ps = connection.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);
				ps.setString(1, book.getTitle());
				return ps;
			}
		}, holder);
		return holder.getKey().intValue();
	}
	
	public void updateBook(Book book) throws SQLException{
		template.query("update tbl_book set title =? where bookId = ?", new Object[] {book.getTitle(), book.getBookId()},this);
	}
	
	public void deleteBook(Book book) throws SQLException{
		template.query("delete from tbl_book where bookId = ?", new Object[] {book.getBookId()},this);
	}
	
	public List<Book> readAllBooks(Integer pageNo1) throws SQLException{
		setPageNo(pageNo1);
		return (List<Book>) template.query("select * from tbl_book", this);
	}
	
	
	public List<Book> readAllBooksByTitle(Integer pageNo1, String searchStringB) throws SQLException{
		searchStringB = "%"+searchStringB+"%";
		setPageNo(pageNo1);
		return (List<Book>) template.query("select * from tbl_book where title like ?", new Object[]{searchStringB},this);
	}
	
	public Book readBooksByPK(Integer bookId) throws SQLException {
		List<Book> books = (List<Book>) template.query("select * from tbl_book where bookId = ?",
				new Object[] { bookId }, this);
		if (books != null) {
			return books.get(0);
		}
		return null;
	}
	
	
	public List<Book> readAllBookswithBranch(int branchId)
			throws ClassNotFoundException, SQLException {
		// TODO Auto-generated method stub
		// setPageNo(pageNo);
		System.out.println("branch in dao"+ branchId);
		return (List<Book>) template.query(
				"select * from tbl_book where bookId in "
				+ "(select bc.bookId from tbl_book_copies as bc where bc.branchId = ? and noOfCopies>0)",
				new Object[] { branchId },this);
	}
	
	


	@Override
	public List<Book> extractData(ResultSet rs) throws SQLException {
		List<Book> books = new ArrayList<>();
		System.out.println("in Book dao");
		while(rs.next()){
			Book b = new Book();
			b.setBookId(rs.getInt("bookId"));
			b.setTitle(rs.getString("title"));
			Publisher p = new Publisher();
			p.setPublisherId(rs.getInt("pubId"));
			b.setPublisher(p);
			books.add(b);
		}
		return books;
	}
		
//
//	public Integer getBooksCount() throws SQLException {
//		// TODO Auto-generated method stub
//		return getCount("select count(*) as COUNT from tbl_book", null);
//	}
	
	public void addBookAuthors(Integer bookId, Integer authorId) throws SQLException {
		// TODO Auto-generated method stub
		
		template.update("insert into tbl_book_authors values (?, ?)", new Object[] {bookId, authorId});
		
	}

	public void addBookGenres(Integer bookId, Integer genreId) throws SQLException {
		// TODO Auto-generated method stub
		template.update("insert into tbl_book_genres values (?, ?)", new Object[] {genreId,bookId});
		
	}

	public void updateBookPublisher(Integer bookId, Integer publisherId) throws SQLException {
		// TODO Auto-generated method stub
		template.update("update tbl_book set pubId = ? where bookId = ?", new Object[]{publisherId,bookId});
	}
	

}
